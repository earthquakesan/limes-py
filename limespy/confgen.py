class LimesConfigGenerator(object):
    default_prefixes = [
        {'namespace': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'label': 'rdf'},
        {'namespace': 'http://www.w3.org/2000/01/rdf-schema#', 'label': 'rdfs'},
        {'namespace': 'http://xmlns.com/foaf/0.1/', 'label': 'foaf'},
        {'namespace': 'http://www.w3.org/2002/07/owl#', 'label': 'owl'},
        {'namespace': 'http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/', 'label': 'drugbank'},
        {'namespace': 'http://dbpedia.org/ontology/', 'label': 'dbpedia'},
        {'namespace': 'http://purl.org/dc/terms/', 'label': 'dc'}
    ]

    def __init__(self):
        pass

    def generateMinimalConfig(self,
                              sourceUri, sourceProperty, sourceType, sourceVar, sourceRestriction,
                              targetUri, targetProperty, targetType, targetVar, targetRestriction,
                              metricString,
                              acceptanceThreshold, acceptanceOutfile, acceptanceRelation,
                              reviewThreshold, reviewOutfile, reviewRelation):
        minimalConfig = ""
        minimalConfig += self.generateMeta()
        minimalConfig += "<LIMES>\n"
        minimalConfig += self.generatePrefixes()
        minimalConfig += self.generateSource(sourceUri, sourceProperty, sourceType, sourceVar, sourceRestriction)
        minimalConfig += self.generateTarget(targetUri, targetProperty, targetType, targetVar, targetRestriction)
        minimalConfig += self.generateMetric(metricString)
        minimalConfig += self.generateAcceptanceCondition(acceptanceThreshold, acceptanceOutfile, acceptanceRelation)
        minimalConfig += self.generateReviewCondition(reviewThreshold, reviewOutfile, reviewRelation)
        minimalConfig += "</LIMES>\n"
        return minimalConfig

    def generateMeta(self):
        meta = """<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy v2010 rel. 3 sp1 (http://www.altova.com)-->
<!DOCTYPE LIMES SYSTEM "limes.dtd">\n"""
        return meta

    def generatePrefixes(self):
        prefixes = ""
        for prefix in self.default_prefixes:
            prefix_string = """    <PREFIX>
        <NAMESPACE>%s</NAMESPACE>
        <LABEL>%s</LABEL>
    </PREFIX>\n""" % (prefix['namespace'], prefix['label'])
            prefixes = prefixes + prefix_string
        return prefixes

    def generateSource(self, sourceUri, sourceProperty, sourceType, sourceVar, sourceRestriction):
        return self.generateEndpoint(sourceUri, sourceProperty, sourceType, sourceVar, sourceRestriction, endpointDestination="SOURCE")

    def generateTarget(self, targetUri, targetProperty, targetType, targetVar, targetRestriction):
        return self.generateEndpoint(targetUri, targetProperty, targetType, targetVar, targetRestriction, endpointDestination="TARGET")

    def generateEndpoint(self, endpointUri, endpointProperty, endpointType, endpointVar, endpointRestriction, endpointDestination="SOURCE"):
        """
            endpoint - full path to the csv file
            property - the name of the column,
            which will be mapped to the property of the ontology (target)
        """
        result = "    <%s>\n" % endpointDestination
        result += """        <ID>CERL</ID>
        <ENDPOINT>%s</ENDPOINT>
        <VAR>%s</VAR>
        <PAGESIZE>-1</PAGESIZE>
        <RESTRICTION>%s</RESTRICTION>
        <PROPERTY>%s</PROPERTY>
        <TYPE>%s</TYPE>\n""" % (endpointUri, endpointVar, endpointRestriction, endpointProperty, endpointType)
        result += "    </%s>\n" % endpointDestination
        return result

    def generateMetric(self, metric_string):
        metric = "    <METRIC>%s</METRIC>\n" % (metric_string)
        return metric

    def generateAcceptanceCondition(self, acceptanceThreshold, outputFile, acceptanceRelation):
        return self.generateCondition(acceptanceThreshold, outputFile, acceptanceRelation, "ACCEPTANCE")

    def generateReviewCondition(self, reviewThreshold, outputFile, reviewRelation):
        return self.generateCondition(reviewThreshold, outputFile, reviewRelation, "REVIEW")

    def generateCondition(self, conditionThreshold, outputFile, conditionRelation, conditionType):
        result = "    <%s>\n" % conditionType
        result += """        <THRESHOLD>%s</THRESHOLD>
        <FILE>%s</FILE>
        <RELATION>%s</RELATION>\n""" % (conditionThreshold, outputFile, conditionRelation)
        result += "    </%s>\n" % conditionType
        return result


    def generate_execution_mode(self):
        pass

    def generate_granularity(self):
        pass

    def generate_output_format(self):
        pass

