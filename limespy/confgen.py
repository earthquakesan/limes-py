class LimesConfigGenerator(object):
    default_prefixes = [
        {'namespace': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'label': 'rdf'},
        {'namespace': 'http://www.w3.org/2000/01/rdf-schema#', 'label': 'rdfs'},
        {'namespace': 'http://xmlns.com/foaf/0.1/', 'label': 'foaf'},
        {'namespace': 'http://www.w3.org/2002/07/owl#', 'label': 'owl'},
        {'namespace': 'http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/', 'label': 'drugbank'},
        {'namespace': 'http://dbpedia.org/ontology/', 'label': 'dbpedia'},
        {'namespace': 'http://purl.org/dc/terms/', 'label': 'dc'}
    ]

    def __init__(self):
        pass

    def generate_minimal_config(self,
                                source_uri,
                                source_property,
                                target_uri,
                                target_property,
                                metric_string,
                                acceptance_threshold,
                                acceptance_outfile,
                                review_threshold,
                                review_outfile):
        minimal_config = ""
        minimal_config += self.generate_meta()
        minimal_config += "<LIMES>\n"
        minimal_config += self.generate_prefixes()
        minimal_config += self.generate_source(source_uri, source_property)
        minimal_config += self.generate_target(target_uri, target_property)
        minimal_config += self.generate_metric(metric_string)
        minimal_config += self.generate_acceptance_condition(acceptance_threshold, acceptance_outfile)
        minimal_config += self.generate_review_condition(review_threshold, review_outfile)
        minimal_config += "</LIMES>\n"
        return minimal_config

    def generate_meta(self):
        meta = """
<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy v2010 rel. 3 sp1 (http://www.altova.com)-->
<!DOCTYPE LIMES SYSTEM "limes.dtd">
        """
        return meta

    def generate_prefixes(self):
        prefixes = ""
        for prefix in self.default_prefixes:
            prefix_string = """
    <PREFIX>
        <NAMESPACE>%s</NAMESPACE>
        <LABEL>%s</LABEL>
    </PREFIX>
            """ % (prefix['namespace'], prefix['label'])
            prefixes = prefixes + prefix_string
        return prefixes

    def generate_source(self, endpoint, property):
        """
            endpoint - full path to the csv file
            property - the name of the column,
            which will be mapped to the property of the ontology (target)
        """
        source = """
    <SOURCE>
        <ID>CERL</ID>
        <ENDPOINT>%s</ENDPOINT>
        <VAR>?x</VAR>
        <PAGESIZE>-1</PAGESIZE>
        <RESTRICTION></RESTRICTION>
        <PROPERTY>%s</PROPERTY>
        <TYPE>csv</TYPE>
    </SOURCE>
        """ % (endpoint, property)
        return source

    def generate_target(self, endpoint, property):
        target = """
    <TARGET>
        <ID>CERL</ID>
        <ENDPOINT>%s</ENDPOINT>
        <VAR>?y</VAR>
        <PAGESIZE>-1</PAGESIZE>
        <RESTRICTION></RESTRICTION>
        <PROPERTY>%s</PROPERTY>
        <TYPE>csv</TYPE>
    </TARGET>""" % (endpoint, property)
        return target

    def generate_metric(self, metric_string):
        metric = """
    <METRIC>%s</METRIC>
        """ % (metric_string)
        return metric

    def generate_acceptance_condition(self, threshold, output_file):
        acceptance_condition = """
    <ACCEPTANCE>
        <THRESHOLD>%s</THRESHOLD>
        <FILE>%s</FILE>
        <RELATION>owl:sameAs</RELATION>
    </ACCEPTANCE>
        """ % (threshold, output_file)
        return acceptance_condition

    def generate_review_condition(self, threshold, output_file):
        review_condition = """
    <REVIEW>
        <THRESHOLD>%s</THRESHOLD>
        <FILE>%s</FILE>
        <RELATION>owl:sameAs</RELATION>
    </REVIEW>
        """ % (threshold, output_file)
        return review_condition

    def generate_execution_mode(self):
        pass

    def generate_granularity(self):
        pass

    def generate_output_format(self):
        pass

